.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "grossd.conf 5"
.TH grossd.conf 5 "2008-05-02" "" ""
.SH "NAME"
\&\fBgrossd.conf\fR \- Greylisting of Suspicious Sources daemon configuration file
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fI%{sysconfdir}/etc/grossd.conf\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIgrossd\fR\|(8) reads configuration data from \fI%{sysconfdir}/etc/grossd.conf\fR
(or the file specified with \fB\-f\fR on the command line). 
An example configuration file is installed by default. You have to
set some configuration options in order to get \fIgrossd\fR\|(8) running in 
your environment. The format is as follows:
.PP
.Vb 1
\&  name = value [ ; param ] ...
.Ve
.PP
Not all options accept parameters \- 
refer to individual descriptions. The comment separator is 
\&\f(CW\*(C`#\*(C'\fR, everything after it is ignored by the config file parser.
.Sh "Network configuration options"
.IX Subsection "Network configuration options"
.IP "\fBhost\fR" 4
.IX Item "host"
is the address the server should listen for queries. Default is
\&\f(CW\*(C`localhost\*(C'\fR.
.IP "\fBport\fR" 4
.IX Item "port"
is the port the server should listen for queries. Default is
\&\f(CW5525\fR.
.IP "\fBsync_listen\fR" 4
.IX Item "sync_listen"
is the address to listen for communication with the peer. It
defaults to \fBhost\fR setting.
.IP "\fBsync_peer\fR" 4
.IX Item "sync_peer"
is the address of the peer used when running in clustered mode.
.IP "\fBsync_port\fR" 4
.IX Item "sync_port"
is the tcp port number to listen to and connect to in communication
with the peer. Default is \f(CW5524\fR.
.IP "\fBstatus_host\fR" 4
.IX Item "status_host"
is the address \fIgrossd\fR\|(8) listens for status queries. Default is \f(CW\*(C`localhost\*(C'\fR.
.IP "\fBstatus_port\fR" 4
.IX Item "status_port"
is the port number \fIgrossd\fR\|(8) listens for status queries. Default is
\&\f(CW5522\fR.
.IP "\fBprotocol\fR" 4
.IX Item "protocol"
activates the server protocols \fIgrossd\fR\|(8) will support. Valid settings are 
\&\f(CW\*(C`sjsms\*(C'\fR, \f(CW\*(C`postfix\*(C'\fR and \f(CW\*(C`milter\*(C'\fR.
.IP "\fBmilter_listen\fR" 4
.IX Item "milter_listen"
is the socket address for the Milter service. The format is
\&\f(CW\*(C`proto:port@host\*(C'\fR. Refer to Milter documentation for the specifics.
.Sh "Core server options"
.IX Subsection "Core server options"
Most probably you can leave these to default settings. If your daily
mail flow exceeds millions a day you may want to tweak 
\&\fBquery_timelimit\fR and/or \fBpool_maxthreads\fR.  If you run \fIgrossd\fR\|(8) in a
server with limited memory you may want to adjust \fBfilter_bits\fR. 
.IP "\fBfilter_bits\fR" 4
.IX Item "filter_bits"
is the size of the Bloom filter. Size will be 2^\fBfilter_bits\fR.
Lowering this value will increase the probability of false matches in each individual
filter. Default is 24. 
.IP "\fBnumber_buffers\fR" 4
.IX Item "number_buffers"
is the number of filter used in the ring queue. Raising this value will cause
an entry to stay in the server's memory longer. Default is 8.
.IP "\fBrotate_interval\fR" 4
.IX Item "rotate_interval"
is the number of seconds between filter rotations. Let
\&\f(CW\*(C`N := \f(CBnumber_buffers\f(CW\*(C'\fR and \f(CW\*(C`I := \f(CBrotate_interval\f(CW\*(C'\fR
An entry will stay in the server's memory for \f(CW\*(C`N \- 0.5 * I\*(C'\fR
seconds on average. Defaults to 3600 seconds (one hour).
.IP "\fBupdate\fR" 4
.IX Item "update"
is the way server updates the database. Valid options are 
\&\f(CW\*(C`grey\*(C'\fR and \f(CW\*(C`always\*(C'\fR.  If set to \f(CW\*(C`grey\*(C'\fR, which is the default,
\&\fIgrossd\fR\|(8) will update the database only if response is
\&\f(CW\*(C`STATUS_GREY\*(C'\fR.  Setting it to \f(CW\*(C`always\*(C'\fR may reduce the impact on
\&\s-1DNS\s0 servers. 
.IP "\fBgrey_mask\fR" 4
.IX Item "grey_mask"
is the mask for \fIgrossd\fR\|(8) to use when matching
\&\f(CW\*(C`smtp\-client\-ip\*(C'\fR against the database. Default is 24, which makes \fIgrossd\fR\|(8)
to treat addresses like \f(CW\*(C`a.b.c.d\*(C'\fR as \f(CW\*(C`a.b.c.0\*(C'\fR.
Setting \fBgrey_mask\fR to 32 makes \fIgrossd\fR\|(8) to require that consecutive
attempts are made from the same \f(CW\*(C`smtp\-client\-ip\*(C'\fR.
.IP "\fBstatefile\fR" 4
.IX Item "statefile"
is the full path of the file that the server uses to store
the state information. Default is not to have a statefile. You may
want to configure a \fBstatefile\fR especially if you do not configure
replication.
.IP "\fBpidfile\fR" 4
.IX Item "pidfile"
is the full path of the file \fIgrossd\fR\|(8) writes its pid into.
You can set parameter \f(CW\*(C`check\*(C'\fR, if you want to keep \fIgrossd\fR\|(8) from
starting, should pidfile already exist.
.Sh "Query constraints"
.IX Subsection "Query constraints"
.IP "\fBgrey_delay\fR" 4
.IX Item "grey_delay"
is the time in seconds new triplets are kept on the greylist. Default is 180.
.IP "\fBquery_timelimit\fR" 4
.IX Item "query_timelimit"
is the query timeout in milliseconds. You may have to adjust this if you
exceed millions of queries a day.
.IP "\fBpool_maxthreads\fR" 4
.IX Item "pool_maxthreads"
is the maximum threadcount per pool. You may have to raise the limit from
the default if you get more than 100 queries per second and/or have slow
\&\s-1DNS\s0 servers. Rule of thumb would be to decide how many queries you want
\&\fIgrossd\fR\|(8) to be able to handle per second, and multiply that with
\&\fBquery_timelimit\fR (in seconds, of course). It defaults to 100.
.Sh "Configuring server responses"
.IX Subsection "Configuring server responses"
.IP "\fBblock_threshold\fR" 4
.IX Item "block_threshold"
is the threshold after which \fIgrossd\fR\|(8) sends 
a permanent error to the client. Every check that considers
\&\f(CW\*(C`smtp\-client\-ip\*(C'\fR as suspicious returns a value
(check weight).  When sum of these values gets equivalent or
greater than \fBblock_threshold\fR \fIgrossd\fR\|(8) sends a
\&\f(CW\*(C`STATUS_BLOCK\*(C'\fR response. Default is 0 which disables this
functionality.
.IP "\fBblock_reason\fR" 4
.IX Item "block_reason"
is the reason given when client is too suspicious, see
\&\fBblock_threshold\fR. Default is \*(L"Bad reputation\*(R".
.IP "\fBgrey_threshold\fR" 4
.IX Item "grey_threshold"
is analogous to \fBblock_threshold\fR, except at the threshold \fIgrossd\fR\|(8)
sends a \f(CW\*(C`STATUS_GREY\*(C'\fR response.
.Sh "Logging options"
.IX Subsection "Logging options"
.IP "\fBlog_method\fR" 4
.IX Item "log_method"
is used to choose the logging method. Currently the only implemented
method is \f(CW\*(C`syslog\*(C'\fR, which is the default.
.IP "\fBlog_level\fR" 4
.IX Item "log_level"
sets the logging verbosity. Possible values in the order of increasing
verbosity are \f(CW\*(C`error\*(C'\fR, \f(CW\*(C`warning\*(C'\fR, \f(CW\*(C`notice\*(C'\fR, \f(CW\*(C`info\*(C'\fR and \f(CW\*(C`debug\*(C'\fR.
\&\fBlog_level\fR defaults to \f(CW\*(C`info\*(C'\fR.
.IP "\fBsyslog_facility\fR" 4
.IX Item "syslog_facility"
is the facility syslog sends log messages with. It defaults to
\&\f(CW\*(C`mail\*(C'\fR.
.IP "\fBstat_type\fR" 4
.IX Item "stat_type"
is the name of the requested statistic. It is of multivalued type. The
valid options are
.RS 4
.ie n .IP """full""" 4
.el .IP "\f(CWfull\fR" 4
.IX Item "full"
log all possible statistics,
.ie n .IP """none""" 4
.el .IP "\f(CWnone\fR" 4
.IX Item "none"
no statistics logging,
.ie n .IP """status""" 4
.el .IP "\f(CWstatus\fR" 4
.IX Item "status"
basic set of statistics, 
.ie n .IP """since_startup""" 4
.el .IP "\f(CWsince_startup\fR" 4
.IX Item "since_startup"
basic set since the startup and
.ie n .IP """delay""" 4
.el .IP "\f(CWdelay\fR" 4
.IX Item "delay"
log processing delay statistics.
.RE
.RS 4
.Sp
Default is \f(CW\*(C`none\*(C'\fR.  Setting both \f(CW\*(C`none\*(C'\fR and \f(CW\*(C`full\*(C'\fR
is undefined.
.RE
.IP "\fBstat_interval\fR" 4
.IX Item "stat_interval"
is the number of seconds between status log entries. Default is 3600.
.Sh "Configuring checks"
.IX Subsection "Configuring checks"
.IP "\fBcheck\fR" 4
.IX Item "check"
is a multivalued option, that is, you can configure multiple checks by
setting \fBcheck\fR option multiple times. Currently implemented checks
are \f(CW\*(C`dnsbl\*(C'\fR, \f(CW\*(C`dnswl\*(C'\fR, \f(CW\*(C`rhsbl\*(C'\fR and \f(CW\*(C`blocker\*(C'\fR.
Refer to sections describing the checks below. If you don't configure
any checks \fIgrossd\fR\|(8) will act as a traditional greylisting server.
.IP "\fBdnsbl\fR" 4
.IX Item "dnsbl"
is a \s-1DNS\s0 domain name of the dnsbl that \f(CW\*(C`dnsbl\*(C'\fR \fBcheck\fR
will query. There are no defaults, but the default configuration file
lists a few as an example. If you have any locally administrated
block lists take into account that \fIgrossd\fR\|(8) makes all queries as
fully qualified. You may assign different weights for the dnsbl's,
default weight is 1.  Refer to \fBgrey_threshold\fR and \fBblock_threshold\fR
about the weights. \fBdnsbl\fR is a multivalued option.
.IP "\fBdnswl\fR" 4
.IX Item "dnswl"
is analogous to \fBdnsbl\fR.  Remember that \fBdnswl\fR is a
\&\fIdefinitive\fR check, that is \fIgrossd\fR\|(8) waits for the check to complete
before deciding how to respond. This may cause unwanted latency,
although you can adjust the maximum latency by \fBquery_timelimit\fR
option. Highly recommended if you use \fIgrossd\fR\|(8) as a traditional greylister.
This is a multivalued option.
.IP "\fBrhsbl\fR" 4
.IX Item "rhsbl"
is analogous to \fBdnsbl\fR, but the check is made against the right
hand side .Pq right hand side block list of the sender address,
that is the domain part of the address. This is a multivalued option.
.IP "\fBblocker_host\fR" 4
.IX Item "blocker_host"
is the host name of the Sophos blocker server. This is used only if
\&\fBcheck\fR = \f(CW\*(C`blocker\*(C'\fR is set.
.IP "\fBblocker_port\fR" 4
.IX Item "blocker_port"
is the \s-1TCP\s0 port of the Sophos blocker service. Default is 4466.
.IP "\fBblocker_weight\fR" 4
.IX Item "blocker_weight"
is the weight of the blocker check. See description of
\&\fBgrey_threshold\fR and \fBblock_threshold\fR regarding the weights.
.Sh "Sun Java System Messaging Server specific options"
.IX Subsection "Sun Java System Messaging Server specific options"
You may configure the responses \fIgrossd\fR\|(8) sends over to grosscheck
library. 
.IP "\fBsjsms_response_grey\fR" 4
.IX Item "sjsms_response_grey"
is the mapping result template \fIgrossd\fR\|(8) uses for a \f(CW\*(C`STATUS_GREY\*(C'\fR
result. Default is \f(CW\*(C`$X4.4.3|$NPlease$ try$ again$ later\*(C'\fR.
.IP "\fBsjsms_response_match\fR" 4
.IX Item "sjsms_response_match"
is the mapping result template \fIgrossd\fR\|(8) uses for a \f(CW\*(C`STATUS_MATCH\*(C'\fR
result. Default is \f(CW$Y\fR.
.IP "\fBsjsms_response_trust\fR" 4
.IX Item "sjsms_response_trust"
is the mapping result template \fIgrossd\fR\|(8) uses for a
\&\f(CW\*(C`STATUS_TRUST\*(C'\fR result. Default is \f(CW$Y\fR.
.IP "\fBsjsms_response_block\fR" 4
.IX Item "sjsms_response_block"
is the mapping result template \fIgrossd\fR\|(8) uses for a
\&\f(CW\*(C`STATUS_BLOCK\*(C'\fR result. Default is
\&\f(CW\*(C`$N%reason%\*(C'\fR, where \f(CW\*(C`%reason%\*(C'\fR is the template for the reason
string.
.SH "MTA CONFIGURATION"
.IX Header "MTA CONFIGURATION"
.Sh "Sun Java System Messaging Server"
.IX Subsection "Sun Java System Messaging Server"
You have to add a mapping entry to set
\&\fB\s-1SJSMS\s0\fR to query \fIgrossd\fR\|(8). It's also a good idea to exclude
postmaster and abuse addresses before querying \fIgrossd\fR\|(8).
.PP
Here is an example:
.PP
.Vb 1
\&  ORIG_MAIL_ACCESS
.Ve
.PP
.Vb 7
\&  ! allow all DSNs and MDNs
\&    TCP|*|*|*|*|*|*|tcp_local||*|*  $Y$E
\&  ! allow all incoming mail to postmaster and abuse
\&    TCP|*|*|*|*|*|*|tcp_local|*|*|postmaster@*  $Y$E
\&    TCP|*|*|*|*|*|*|tcp_local|*|*|abuse@*  $Y$E
\&  ! use gross to check all triplets (client_ip,sender,recipient)
\&    TCP|*|*|*|*|SMTP/*|*|tcp_local|*|*|*  $[%{libdir}/grosscheck.so,grosscheck,10.10.13.1,10.10.13.2,5525,$2,$=$8$_,$=$6$_,$=$4$_]
.Ve
.PP
Mapping call parameters are as follows:
.ie n .IP "1. full path of the ""grosscheck.so""" 4
.el .IP "1. full path of the \f(CWgrosscheck.so\fR" 4
.IX Item "1. full path of the grosscheck.so"
.PD 0
.ie n .IP "2. function name to call (always ""grosscheck"")" 4
.el .IP "2. function name to call (always \f(CWgrosscheck\fR)" 4
.IX Item "2. function name to call (always grosscheck)"
.IP "3. first server's \s-1IP\s0 address," 4
.IX Item "3. first server's IP address,"
.IP "4. second server's \s-1IP\s0 address," 4
.IX Item "4. second server's IP address,"
.IP "5. \s-1UDP\s0 port for server connections," 4
.IX Item "5. UDP port for server connections,"
.IP "6. \s-1SMTP\s0 client's \s-1IP\s0 address," 4
.IX Item "6. SMTP client's IP address,"
.IP "7. envelope sender's email address," 4
.IX Item "7. envelope sender's email address,"
.IP "8. envelope recipient's email address," 4
.IX Item "8. envelope recipient's email address,"
.IP "9. \s-1HELO/EHLO\s0 string." 4
.IX Item "9. HELO/EHLO string."
.PD
.Sh "Postfix"
.IX Subsection "Postfix"
Grossd implements native Postfix policy delegation protocol. Just specify
grossd server address at the \f(CW\*(C`smtpd_recipient_restrictions\*(C'\fR
in the main configuration file
.PP
main.cf :
.PP
.Vb 6
\&  /etc/postfix/main.cf:
\&      smtpd_recipient_restrictions =
\&          ... 
\&          reject_unauth_destination 
\&          check_policy_service inet:host:port
\&          ...
.Ve
.PP
Refer to Postfix documentation at
<http://www.postfix.org> for specifics.
.Sh "Exim"
.IX Subsection "Exim"
Exim can be configured to query \fIgrossd\fR\|(8) via
Postfix policy delegation protocol. 
.PP
Main section:
.PP
.Vb 4
\&  GROSS_QUERY = sender=$sender_address\e\en\e\e
\&    recipient=$local_part@$domain\e\en\e\e
\&    client_address=$sender_host_address\e\en\e\e
\&    grossd_mode=single\e\en\e\en
.Ve
.PP
Acl section:
.PP
.Vb 3
\&  # gross
\&  warn
\&    set acl_c0 = ${readsocket{inet:127.0.0.1:5525}{GROSS_QUERY}}
.Ve
.PP
.Vb 3
\&  defer
\&    message = Please try again later.
\&    condition = ${if match {$acl_c0}{action=defer_if_permit}}
.Ve
.PP
.Vb 4
\&  deny
\&    message = ${if match {$acl_c0}{action=reject (.*)}{$1}\e\e
\&      {Rejected by Gross.}}
\&    condition = ${if match {$acl_c0}{action=reject}}
.Ve
.Sh "Sendmail"
.IX Subsection "Sendmail"
Sendmail can query grossd via milter protocol. Insert this in
sendmail.mc and configure \fBmilter_listen\fR accordingly:
.PP
.Vb 1
\&  INPUT_MAIL_FILTER(`Gross', `S=inet:5523@localhost, T=R:20s')
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIgrossd\fR\|(8)
.PP
Gross project site:
<http://code.google.com/p/gross/>
.PP
Bloom filters: <http://en.wikipedia.org/wiki/Bloom_filter>
.SH "AUTHORS"
.IX Header "AUTHORS"
Eino Tuominen and Antti Siira
