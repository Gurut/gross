REQUIREMENTS

You'll need a decent compiler, we have tested gcc on FreeBSD and
Sun Studio 8 on Solaris Sparc.

In order to configure dnsbl queries you need c-ares library for
asynhronous dns queries. You can download it here:
http://daniel.haxx.se/projects/c-ares/

COMPILING

You should be able to compile it for testing by just commanding:

$ ./configure --prefix=/tmp/gross
$ make install

BASIC CONFIGURATION

An example configuration is included in doc/example/grossd.conf:
It is installed also as the default configuration in
$PREFIX/etc/grossd.conf. You may tell grossd to use another config
file via -f command line option. 

The server keeps the state information in the Bloom filter bit arrays.
By the nature of the filters you can insert elements in the filters, but
not to remove them. So we actually use several filters, and rotate them
on intervals. The actual filter is just a logical OR of those rotating
filters. number_buffers is the number of the rotating filters, and
rotate_interval is the interval in seconds. So, 8 buffers with 2 minutes
rotate interval will give you approximately 2 * 7.5 minutes worth of
state information. That is, any greylisted triplet will be stored for
some 15 minutes. Of course, you have to modify the numbers when going
into production. Default interval is 3600 seconds. This is the
configuration we use on our production servers:

dnsbl=rbl-plus.mail-abuse.org
dnsbl=bl.spamcop.net
dnsbl=sbl.spamhaus.org
dnsbl=dnsbl.njabl.org
dnsbl=cbl.abuseat.org
dnsbl=xbl.smaphaus.org
dnsbl=dnsbl.sorbs.net
host=smtp02
sync_listen=smtp02
sync_peer=smtp01
number_buffers=12
filter_bits=24
statefile=/usr/local/gross/etc/grossd.state
stat_type=full
protocol=sjsms

sync_listen is the server ip, and sync_peer stands for the replication
partners ip address.

If you get this far, you can start the server. I suggest you
run the server first in foreground with -d option. If you
configured statefile, you have to start grossd with -C option
in order to create the state file.

Grossd query server defaults to port 1111/tcp with proto=postfix,
port 1111/udp with proto=sjsms and replication service
(if configured) to port 1112/tcp.

After starting, you can test it with $PREFIX/bin/gclient.
Good luck, and don't hesitate to ask me if in doubt!

MTA CONFIGURATION

Although never tested in production, Gross should work with
Postfix's native filtering protocol.

On the other hand, SJSMS needs some mapping entry for queries.
This is an example production server config:

ORIG_MAIL_ACCESS

  ! allow all DSNs and MDNs
  TCP|*|*|*|*|*|*|tcp_local||*|*  $Y$E
  ! allow all incoming mail to postmaster and abuse
  TCP|*|*|*|*|*|*|tcp_local|*|*|postmaster@*  $Y$E
  TCP|*|*|*|*|*|*|tcp_local|*|*|abuse@*  $Y$E
  ! use gross to check all triplets (client_ip,sender,recipient)
  TCP|*|*|*|*|*|*|tcp_local|*|*|*  $[/usr/local/gross/lib/grosscheck.so,grosscheck,10.10.13.1,10.10.13.2,1111,$2,$=$8$_,$=$6$_]

The server will always query the first server if it's available.

First, when you have only one server, you can test it like this:

  TCP|*|*|*|*|*|*|tcp_local|*|*|*  $[/path/to/grosscheck.so,grosscheck,127.0.0.1,,1111,$2,$=$8$_,$=$6$_]

KNOWN ISSUES

See http://code.google.com/p/gross/issues/list for bugs
and known issues.

LOGGING AND TROUBLESHOOTING

grossd logs everything through syslog. Facility is LOG_MAIL, loglevel
defaults to INFO. You can control logging with 'log_level' and
'syslog_facility' configuration options.

You can enable full debugging by starting grossd with -D command line
option. You may also want -d, as grossd then writes output on standard
terminal instead of syslog.
