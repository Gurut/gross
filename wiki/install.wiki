#summary This is the working copy of the INSTALL file of the source package.
#labels Phase-Deploy,Featured

= Requirements =

Gross is currently known to work on
  * Solaris
  * Linux
  * FreeBSD
  * Mac OS X

Mac OS X support is slightly limited. Skipping unresponsive dnsbls does not work, as OS X lacks `sem_getvalue()`.

You'll need a decent compiler, we have tested gcc on FreeBSD and Linux and
Sun Studio 8 on Solaris Sparc.

In order to configure dnsbl queries you need [http://daniel.haxx.se/projects/c-ares/ c-ares] library for
asynhronous dns queries. 

= Compiling =

You should be able to compile it for testing by just commanding:

{{{
$ ./configure --prefix=/tmp/gross
$ make install
}}}

= Basic configuration =

Example configuration 'doc/examples/grossd.conf' is installed as default config.

The server keeps the state information in the Bloom filter bit arrays.
By the nature of the filters you can insert elements in the filters, but
not to remove them. So we actually use several filters, and rotate them
on intervals. The actual filter is just a logical OR of those rotating
filters. `number_buffers` is the number of the rotating filters, and
`rotate_interval` is the interval in seconds. So, 8 buffers with 2 minutes
rotate interval will give you approximately 2 `*` 7.5 minutes worth of
state information. That is, any greylisted triplet will be stored for
some 15 minutes. Of course, you have to modify the numbers when going
into production. Default interval is 3600 seconds. This is the
configuration we use on our production servers:

{{{
dnsbl=rbl-plus.mail-abuse.org
dnsbl=bl.spamcop.net
dnsbl=sbl.spamhaus.org
dnsbl=dnsbl.njabl.org
dnsbl=cbl.abuseat.org
dnsbl=xbl.smaphaus.org
dnsbl=dnsbl.sorbs.net
host=smtp01
sync_listen=smtp01
sync_peer=smtp02
number_buffers=12
filter_bits=24
statefile=/usr/local/gross/etc/grossd.state
stat_type=full
protocol=sjsms
}}}

`sync_listen` is the server ip, and `sync_peer` stands for the replication
partners ip address.

If you get this far, you can start the server. I suggest you
run the server first in foreground with `-d` option. If you configured 
statefile, you have to start grossd with `-C` option in order to create the 
state file.

After starting, you can test it with `$PREFIX/bin/gclient`. 
Good luck, and don't hesitate to ask me if in doubt!

= MTA Configuration =

== Postfix ===

Although never tested, Gross should work with Postfix's native
filtering protocol. 

Add the following in `main.cf`:

{{{
smtpd_recipient_restrictions =
        reject_unauth_destination
        check_policy_service inet:127.0.0.1:1111
}}}

That should enable postfix to send queries to grossd running at localhost port 1111.

== Sun Java System Messaging Server ==

SJSMS needs some mapping entry for queries.
This is an entry from our production server config:

{{{
ORIG_MAIL_ACCESS

  TCP|*|*|*|*|*|*|tcp_local|*|*|*  $[/usr/local/gross/gross/grosscheck.so,grosscheck,
10.10.13.1,10.10.13.2,1111,$2,$=$8$_,$=$6$_]
}}}

The server will always query the first server if it's available.

First, when you have only one server, you can test it like this:

{{{
  TCP|*|*|*|*|*|*|tcp_local|*|*|*  $[/path/to/grosscheck.so,grosscheck,127.0.0.1,,1111,$2,$=$8$_,$=$6$_]
}}}

= Known Issues =

See [http://code.google.com/p/gross/issues/list] for bugs
and known issues.


= Logging and Troubleshooting =

`grossd` logs everything through syslog. Facility is `LOG_MAIL`, loglevel
defaults to `INFO`. Refer to [sjsms_debug] file for how to debug problems
with SJSMS.

You can enable full debugging by starting grossd with `-D` command line
option. You may also want `-d`, as grossd then writes output on standard
terminal instead of syslog.